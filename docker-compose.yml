version: '3.8'
services:
  postgres:
    image: postgis/postgis:15-3.4
    environment:
      POSTGRES_DB: newsdb
      POSTGRES_USER: news
      POSTGRES_PASSWORD: secret
    ports: ['5432:5432']
    volumes:
      - ./postgres-init/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7-alpine
    ports: ['6379:6379']

  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
      - "8081:8080"
    environment:
      ZOO_4LW_COMMANDS_WHITELIST: "*"
      JVMFLAGS: "-Dzookeeper.admin.serverPort=8080"
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:latest
    environment:
      # --- KRaft settings ---
      # Sets the roles for this node as both a broker and a controller.
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      # Assigns a unique ID to this Kafka node.
      - KAFKA_CFG_NODE_ID=1
      # Defines the controller quorum, pointing to itself for a single-node setup.
      # The hostname 'kafka' must match this service's name.
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      
      # --- Listener settings ---
      # Configures the listeners for client connections (PLAINTEXT) and controller communication.
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://:9093
      # Advertises the address that clients can use to connect to Kafka from within the Docker network.
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      # Maps listener names to security protocols.
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      # Specifies the name of the listener used for controller traffic.
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      # --- General settings ---
      # Allows the use of PLAINTEXT, which is not recommended for production.
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Enables debug logging for more detailed output.
#      - BITNAMI_DEBUG=true
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami/kafka

  news-service:
    build: ./news-retrieval-system
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/newsdb
      SPRING_DATASOURCE_USERNAME: news
      SPRING_DATASOURCE_PASSWORD: secret
      LLM_SERVICE_URL: http://llm-service:8000
      SPRING_DATA_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports: ['8080:8080']
    volumes:
      - ./news-retrieval-system:/app
    command: ["sh", "-c", "mvn spring-boot:run"]
    depends_on: [postgres, redis, kafka]

  llm-service:
    build: ./llm-service
    volumes:
      - ./llm-service:/app
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    ports: ['8000:8000']
  
  pgadmin:
    image: dpage/pgadmin4:7.0
    container_name: pgadmin
    environment:
      # these are the UI login creds
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"       # host:container
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper

volumes:
  zookeeper_data:
  kafka_data:
  pgadmin_data:
